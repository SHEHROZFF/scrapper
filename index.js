const puppeteer = require('puppeteer');
const fs = require('fs');

const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const scrapeRustMarket = async (maxPages = 420) => {
    const baseUrl = 'https://steamcommunity.com/market/search?appid=252490';
    let pageNumber = 1;
    const fileName = 'rust_market_items.json';

    // Initialize the file with an empty array if it doesn't exist
    if (!fs.existsSync(fileName)) {
        fs.writeFileSync(fileName, JSON.stringify([]));
    }

    // Launch Puppeteer and open a new page
    const browser = await puppeteer.launch();
    const page = await browser.newPage();

    while (pageNumber <= maxPages) {
        try {
            const url = `${baseUrl}#p${pageNumber}_popular_desc`;
            console.log(`Navigating to URL: ${url}`);

            // Go to the page with the URL fragment
            await page.goto(url, { waitUntil: 'networkidle2' });
            await delay(2000); // Allow some time for the page to load

            // Extract data from the page
            const pageItems = await page.evaluate(() => {
                const items = [];
                document.querySelectorAll('.market_listing_row_link').forEach((element) => {
                    const itemName = element.querySelector('.market_listing_item_name')?.textContent?.trim() || '';
                    const itemPrice = element.querySelector('.normal_price')?.textContent?.trim().replace(/Starting at:/, '').trim() || '';
                    const itemUrl = element.getAttribute('href') || '';

                    items.push({ name: itemName, price: itemPrice, url: itemUrl });
                });
                return items;
            });

            // Check if no items were found
            if (pageItems.length === 0) {
                console.log('No more items found.');
                break;
            }

            // Read the existing data from the file
            const existingData = JSON.parse(fs.readFileSync(fileName, 'utf-8'));

            // Append the new items to the existing data
            existingData.push(...pageItems);

            // Write the updated data back to the file
            fs.writeFileSync(fileName, JSON.stringify(existingData, null, 2));

            console.log(`Page ${pageNumber} scraped and saved successfully.`);

            // Add a delay after every 20 pages
            if (pageNumber % 20 === 0) {
                console.log(`Pausing for 3 minutes after scraping page ${pageNumber}...`);
                checkRepetency('rust_market_items.json');

                await delay(300000); // Wait for 3 minutes (180,000 milliseconds)
            }

            pageNumber++;
            await delay(2000); // Delay to avoid hitting rate limits
        } catch (error) {
            console.error(`Error on page ${pageNumber}: ${error.message}`);
            break; // Stop on errors
        }
    }

    // Close the browser
    await browser.close();

    console.log(`Scraping complete.`);
};

scrapeRustMarket();



// const fs = require('fs');

const checkRepetency = (jsonFilePath) => {
    // Read the JSON file
    const rawData = fs.readFileSync(jsonFilePath);
    const items = JSON.parse(rawData);

    // Create a map to count occurrences of each itemName
    const itemNameCount = {};
    let duplicates = 0;

    items.forEach(item => {
        const itemName = item.name;
        if (itemNameCount[itemName]) {
            itemNameCount[itemName]++;
            duplicates++;
        } else {
            itemNameCount[itemName] = 1;
        }
    });

    // Log results
    if (duplicates > 0) {
        console.log(`Found ${duplicates} duplicate item(s) in the JSON data:`);
        for (const [name, count] of Object.entries(itemNameCount)) {
            if (count > 1) {
                console.log(`- ${name}: ${count} occurrences`);
            }
        }
    } else {
        console.log('No duplicates found in the JSON data.');
    }
};

// Example usage:
// Provide the path to the JSON file generated by the scraper
